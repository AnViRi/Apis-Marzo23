{
	"info": {
		"_postman_id": "1b499a80-8ed5-4877-9256-f92b91e6ae27",
		"name": "Practica 3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25474017"
	},
	"item": [
		{
			"name": "get HealthCheck -201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 201\", function(){",
							"    ",
							"    pm.response.to.have.status(201)",
							"    ",
							"});",
							"",
							"pm.test(\"Validar que el status response es igual a Created\", function(){",
							"    ",
							"    pm.response.to.have.status(\"Created\") ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_base}}/ping",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetToken - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 200\", function(){",
							"    ",
							"    pm.response.to.have.status(200)",
							"    ",
							"});",
							"",
							"pm.test(\"Validar que el status response es igual a OK\", function(){",
							"    ",
							"    pm.response.to.have.status(\"OK\") ",
							"});",
							"",
							"pm.test(\"validar que el body tiene la palabra TOKEN\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"token\")",
							"});",
							"",
							"console.log(pm.response.text()) //le estamos didicndo que imprima el resultado en la consola en forma de texto",
							"console.log(pm.response.json().token.length)//imprima en consola en forma de json, especificamente el token y el  número de caractéres q debe tener",
							"",
							"pm.test(\"validar que el campo token regresa un dato tipo STRING\", function (){",
							"    pm.expect(pm.response.json().token).to.be.a('string') ",
							"});",
							"",
							"pm.test(\"validar que el token tiene 15 caracteres\", function(){",
							"    var tamano = pm.response.json().token.length;",
							"    pm.expect(tamano).to.be.equal(15)",
							"})",
							"",
							"pm.test(\"validad que el campo token no es Null\", function (){",
							"    pm.expect (pm.response.json().token).not.to.be.null;",
							"})",
							"",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    //pm.expect(pm.response.body).to.not.be.empty;",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"})",
							"",
							"tests[\"Test Response Time\" + responseTime + \"ms\"] = responseTime < 2000;",
							"tests[\"Body is not empty\"] = (responseBody!=null );",
							"",
							"//CREAR VARIABLES",
							"var token = pm.response.json().token; ",
							"pm.environment.set(\"token\",token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Transfer-Encoding",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_base}}/auth",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateBooking - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();",
							"//console.log(\"Response:\", responseJson.bookingid)",
							"pm.environment.set(\"id\", responseJson.bookingid)",
							"",
							"pm.test(\"Validar que el status code reponse es un 200\", function(){",
							"    pm.response.to.have.status(200)",
							"});",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"});",
							"",
							"var name = pm. environment.get(\"nombre\")",
							"//es una variable de ambiente pero para tenerla local hay que invocarla",
							"console.log (\"variable nombre:\", name)",
							"console.log(\"Response:\", responseJson.booking.firstname)",
							"",
							"pm.test(\"validar que el nombre de la reserva es igual a la variable\", function (){",
							"    pm.expect(responseJson.booking.firstname).to.eq(name)",
							"})",
							"",
							"",
							"//validar un header response",
							"pm.test(\"validar que el header Content-Type contiene application Json\", function(){",
							"    pm.expect(pm.response.headers.get(\"Content-type\")).to.eql(\"application/json; charset=utf-8\")",
							"})",
							"",
							"pm.test(\"validar el tamaño de la respuesta\", function (){",
							"    console.log(pm.response.size().total)",
							"    pm.expect(pm.response.size().total).to.be.below(1000)",
							"})",
							"console.log(pm.response.size())",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name = pm.variables.replaceIn(\"{{$randomFirstName}}\")",
							"//console.log(\"Nombre: \", name)",
							"pm.environment.set(\"nombre\", name)",
							"",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")",
							"pm.environment.set(\"apellido\", lastname)",
							"",
							"var price = pm.variables.replaceIn(\"{{$randomInt}}\")",
							"pm.environment.set(\"precio\", price)",
							"",
							"var deposit = pm.variables.replaceIn(\"{{$randomBoolean}}\")",
							"pm.environment.set(\"deposito\", deposit)",
							"",
							"var date = pm.variables.replaceIn (\"{{$isoTimestamp}}\")",
							"//console.log (date)",
							"var checkin = date.split(\"T\")[0];",
							"//console.log (checkin)",
							"pm.environment.set(\"checkin\", checkin)",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"{{nombre}}\",\n    \"lastname\" : \"{{apellido}}\",\n    \"totalprice\" : \"{{precio}}\",\n    \"depositpaid\" : \"{{deposito}}\",\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkin}}\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_base}}/booking",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 200\", function(){",
							"    pm.response.to.have.status(200) ",
							"});",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_base}}/booking/{{id}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 200\", function(){",
							"    pm.response.to.have.status(200) ",
							"});",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_base}}/booking/{{id}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingAfterUpDate - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 200\", function(){",
							"    pm.response.to.have.status(200) ",
							"});",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_base}}/booking/{{id}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking - 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 201\", function(){",
							"    pm.response.to.have.status(201) ",
							"});",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_base}}/booking/{{id}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingAfterDelete - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 404\", function(){",
							"    pm.response.to.have.status(404) ",
							"});",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_base}}/booking/{{id}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking -negative test - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 404\", function(){",
							"    pm.response.to.have.status(404) ",
							"});",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_base}}/booking/47589339485",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"47589339485"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking - negative test- 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 200\", function(){",
							"    pm.response.to.have.status(200) ",
							"});",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_base}}/booking/55555555",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"55555555"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking - negative test letters- 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 200\", function(){",
							"    pm.response.to.have.status(200) ",
							"});",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_base}}/booking/abcdefg",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"abcdefg"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking - negativetest- 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 201\", function(){",
							"    pm.response.to.have.status(201) ",
							"});",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_base}}/booking/5555555",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"5555555"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking -negative test2 - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code reponse es un 404\", function(){",
							"    pm.response.to.have.status(404) ",
							"});",
							"pm.test(\"validar que el tiempo de respuesta es menor a 1seg\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"pm.test(\"validar que el body no viene vacio\", function (){",
							"    pm.expect(pm.response.body).not.to.be.null;",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_base}}/booking/abcdefg",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"abcdefg"
					]
				}
			},
			"response": []
		}
	]
}